typedef struct VkPhysicalDeviceFeatures {
01    VkBool32    robustBufferAccess;
02    VkBool32    fullDrawIndexUint32;
03    VkBool32    imageCubeArray;
04    VkBool32    independentBlend;
05    VkBool32    geometryShader;
06    VkBool32    tessellationShader;
07    VkBool32    sampleRateShading;
08    VkBool32    dualSrcBlend;
09    VkBool32    logicOp;
10    VkBool32    multiDrawIndirect;
11    VkBool32    drawIndirectFirstInstance;
12    VkBool32    depthClamp;
13    VkBool32    depthBiasClamp;
14    VkBool32    fillModeNonSolid;
15    VkBool32    depthBounds;
16    VkBool32    wideLines;
17    VkBool32    largePoints;
18    VkBool32    alphaToOne;
19    VkBool32    multiViewport;
20    VkBool32    samplerAnisotropy;
21    VkBool32    textureCompressionETC2;
22    VkBool32    textureCompressionASTC_LDR;
23    VkBool32    textureCompressionBC;
24    VkBool32    occlusionQueryPrecise;
25    VkBool32    pipelineStatisticsQuery;
26    VkBool32    vertexPipelineStoresAndAtomics;
27    VkBool32    fragmentStoresAndAtomics;
28    VkBool32    shaderTessellationAndGeometryPointSize;
29    VkBool32    shaderImageGatherExtended;
30    VkBool32    shaderStorageImageExtendedFormats;
31    VkBool32    shaderStorageImageMultisample;
32    VkBool32    shaderStorageImageReadWithoutFormat;
33    VkBool32    shaderStorageImageWriteWithoutFormat;
34    VkBool32    shaderUniformBufferArrayDynamicIndexing;
35    VkBool32    shaderSampledImageArrayDynamicIndexing;
36    VkBool32    shaderStorageBufferArrayDynamicIndexing;
37    VkBool32    shaderStorageImageArrayDynamicIndexing;
38    VkBool32    shaderClipDistance;
39    VkBool32    shaderCullDistance;
40    VkBool32    shaderFloat64;
41    VkBool32    shaderInt64;
42    VkBool32    shaderInt16;
43    VkBool32    shaderResourceResidency;
44    VkBool32    shaderResourceMinLod;
45    VkBool32    sparseBinding;
46    VkBool32    sparseResidencyBuffer;
47    VkBool32    sparseResidencyImage2D;
48    VkBool32    sparseResidencyImage3D;
49    VkBool32    sparseResidency2Samples;
50    VkBool32    sparseResidency4Samples;
51    VkBool32    sparseResidency8Samples;
52    VkBool32    sparseResidency16Samples;
53    VkBool32    sparseResidencyAliased;
54    VkBool32    variableMultisampleRate;
55    VkBool32    inheritedQueries;
} VkPhysicalDeviceFeatures; (55)

typedef struct VkPhysicalDeviceVulkan11Features {
    VkStructureType    sType;
    void*              pNext;
01    VkBool32           storageBuffer16BitAccess;
02    VkBool32           uniformAndStorageBuffer16BitAccess;
03    VkBool32           storagePushConstant16;
04    VkBool32           storageInputOutput16;
05    VkBool32           multiview;
06    VkBool32           multiviewGeometryShader;
07    VkBool32           multiviewTessellationShader;
08    VkBool32           variablePointersStorageBuffer;
09    VkBool32           variablePointers;
10    VkBool32           protectedMemory;
11    VkBool32           samplerYcbcrConversion;
12    VkBool32           shaderDrawParameters;
} VkPhysicalDeviceVulkan11Features; (12)

typedef struct VkPhysicalDeviceVulkan12Features {
    VkStructureType    sType;
    void*              pNext;
01    VkBool32           samplerMirrorClampToEdge;
02    VkBool32           drawIndirectCount;
03    VkBool32           storageBuffer8BitAccess;
04    VkBool32           uniformAndStorageBuffer8BitAccess;
05    VkBool32           storagePushConstant8;
06    VkBool32           shaderBufferInt64Atomics;
07    VkBool32           shaderSharedInt64Atomics;
08    VkBool32           shaderFloat16;
09    VkBool32           shaderInt8;
10    VkBool32           descriptorIndexing;
11    VkBool32           shaderInputAttachmentArrayDynamicIndexing;
12    VkBool32           shaderUniformTexelBufferArrayDynamicIndexing;
13    VkBool32           shaderStorageTexelBufferArrayDynamicIndexing;
14    VkBool32           shaderUniformBufferArrayNonUniformIndexing;
15    VkBool32           shaderSampledImageArrayNonUniformIndexing;
16    VkBool32           shaderStorageBufferArrayNonUniformIndexing;
17    VkBool32           shaderStorageImageArrayNonUniformIndexing;
18    VkBool32           shaderInputAttachmentArrayNonUniformIndexing;
19    VkBool32           shaderUniformTexelBufferArrayNonUniformIndexing;
20    VkBool32           shaderStorageTexelBufferArrayNonUniformIndexing;
21    VkBool32           descriptorBindingUniformBufferUpdateAfterBind;
22    VkBool32           descriptorBindingSampledImageUpdateAfterBind;
23    VkBool32           descriptorBindingStorageImageUpdateAfterBind;
24    VkBool32           descriptorBindingStorageBufferUpdateAfterBind;
25    VkBool32           descriptorBindingUniformTexelBufferUpdateAfterBind;
26    VkBool32           descriptorBindingStorageTexelBufferUpdateAfterBind;
27    VkBool32           descriptorBindingUpdateUnusedWhilePending;
28    VkBool32           descriptorBindingPartiallyBound;
29    VkBool32           descriptorBindingVariableDescriptorCount;
30    VkBool32           runtimeDescriptorArray;
31    VkBool32           samplerFilterMinmax;
32    VkBool32           scalarBlockLayout;
33    VkBool32           imagelessFramebuffer;
34    VkBool32           uniformBufferStandardLayout;
35    VkBool32           shaderSubgroupExtendedTypes;
36    VkBool32           separateDepthStencilLayouts;
37    VkBool32           hostQueryReset;
38    VkBool32           timelineSemaphore;
39    VkBool32           bufferDeviceAddress;
40    VkBool32           bufferDeviceAddressCaptureReplay;
41    VkBool32           bufferDeviceAddressMultiDevice;
42    VkBool32           vulkanMemoryModel;
43    VkBool32           vulkanMemoryModelDeviceScope;
44    VkBool32           vulkanMemoryModelAvailabilityVisibilityChains;
45    VkBool32           shaderOutputViewportIndex;
46    VkBool32           shaderOutputLayer;
47    VkBool32           subgroupBroadcastDynamicId;
} VkPhysicalDeviceVulkan12Features; (47)

typedef struct VkPhysicalDeviceVulkan13Features {
    VkStructureType    sType;
    void*              pNext;
01    VkBool32           robustImageAccess;
02    VkBool32           inlineUniformBlock;
03    VkBool32           descriptorBindingInlineUniformBlockUpdateAfterBind;
04    VkBool32           pipelineCreationCacheControl;
05    VkBool32           privateData;
06    VkBool32           shaderDemoteToHelperInvocation;
07    VkBool32           shaderTerminateInvocation;
08    VkBool32           subgroupSizeControl;
09    VkBool32           computeFullSubgroups;
10    VkBool32           synchronization2;
11    VkBool32           textureCompressionASTC_HDR;
12    VkBool32           shaderZeroInitializeWorkgroupMemory;
13    VkBool32           dynamicRendering;
14    VkBool32           shaderIntegerDotProduct;
15    VkBool32           maintenance4;
} VkPhysicalDeviceVulkan13Features; (15)


For the folder we'll have .info files to let users know their system specs, .cfg files for things they can edit.